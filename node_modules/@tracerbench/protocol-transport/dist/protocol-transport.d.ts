import { AttachMessageTransport } from '@tracerbench/message-transport';
import { RaceCancellation } from 'race-cancellation';

export declare type AttachJsonRpcTransport = (
  onNotification: OnNotification,
  onError: OnError,
  onClose: OnClose,
) => [SendRequest, RaceCancellation];

export declare type AttachProtocolTransport<SessionId> = (
  onEvent: OnEvent,
  onError: OnError,
  onClose: OnClose,
) => ProtocolTransport<SessionId>;

export declare type AttachSession<SessionId> = (
  sessionId: SessionId,
) => AttachProtocolTransport<SessionId>;

export declare type DebugCallback = (fmt: string, ...args: any[]) => void;

export declare type DetachSession<SessionId> = (sessionId: SessionId) => void;

export declare interface ErrorResponse {
  id: number;
  error: ResponseError;
}

export declare function isProtocolError(error: Error): error is ProtocolError;

/**
 * Creates a AttachJsonRpcTransport function from the specified
 * AttachMessageTransport function.
 *
 * This just handles the JSON RPC part of adapting the message transport.
 *
 * It does not support all of JSON RPC, only whats needed for the DevTools API.
 * The client can only receive notifications and send requests.
 * The client cannot receive requests or send notifications.
 *
 * @param attach a function that attaches the message transport
 * @param debug an optional debug function, should support format string + args like npm debug
 * @param raceCancellation a raceCancellation that is scoped to the transport like Chrome exited
 */
export declare function newAttachJsonRpcTransport(attach: AttachMessageTransport, debug?: DebugCallback, raceCancellation?: RaceCancellation): AttachJsonRpcTransport;

/**
 * Adapts a AttachJsonRpcTransport function to a AttachProtocolTransport function.
 *
 * Adds support for flattened sessions and creates JSON RPC Request object and unwraps Response.
 *
 * @param attach
 */
export declare function newAttachProtocolTransport<SessionId>(attach: AttachJsonRpcTransport): AttachProtocolTransport<SessionId>;

declare function newAttachProtocolTransport_2<SessionId>(attach: AttachMessageTransport, debug?: DebugCallback, raceCancellation?: RaceCancellation): AttachProtocolTransport<SessionId>;
export default newAttachProtocolTransport_2;

export declare interface Notification<
  Method extends string = string,
  Params extends object = object,
  SessionID = unknown
> {
  method: Method;
  params?: Params;
  sessionId?: SessionID;
}

export declare type OnClose = () => void;

export declare type OnError = (error: Error) => void;

export declare type OnEvent = <
  Event extends string = string,
  Params extends object = object
>(
  event: Event,
  params?: Params,
) => void;

export declare type OnNotification = <
  Method extends string = string,
  Params extends object = object
>(
  notification: Notification<Method, Params>,
) => void;

export declare interface ProtocolError<
  Method extends string = string,
  Params extends object = object
> extends Error {
  name: "ProtocolError";
  request: Request<Method, Params>;
  response: ErrorResponse;
}

export declare type ProtocolTransport<SessionId> = [
  AttachSession<SessionId>,
  DetachSession<SessionId>,
  SendMethod<SessionId>,
  RaceCancellation,
];

export declare interface Request<
  Method extends string = string,
  Params extends object = object,
  SessionID = unknown
> {
  /**
   * The request gets assigned an id when it is sent.
   */
  id?: number;
  method: Method;
  params?: Params;

  /**
   * Flattened sessionId
   */
  sessionId?: SessionID;
}

export declare type Response<Result extends object | void = object | void> =
  | SuccessResponse<Result>
  | ErrorResponse;

export declare interface ResponseError {
  code: number;
  message: string;
  data?: unknown;
}

export declare type SendMethod<SessionId> = <
  Method extends string,
  Params extends object,
  Result extends object
>(
  method: Method,
  params?: Params,
  raceCancellation?: RaceCancellation,
) => Promise<Result>;

export declare type SendRequest = <
  Method extends string,
  Params extends object,
  Result extends object
>(
  request: Request<Method, Params>,
  raceCancellation?: RaceCancellation,
) => Promise<Response<Result>>;

export declare interface SuccessResponse<Result> {
  id: number;
  result: Result;
}

export { }
